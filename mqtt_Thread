package com.hfad.smartgardn;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.Log;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

import java.util.Random;
import java.util.UUID;

public class mqtt_Thread extends Thread
{
    public static Handler handler;
//    public Handler handler2;
//    mqtt_Thread(Handler handler)
//    {
//        handler2=handler;
//    }
    @Override
    public void run()
    {
        String HOST = "ssl://d1x5yxi.mqtt.iot.gz.baidubce.com:1884";
        String TOPIC_sub= "data_from_garden";
        final String TOPIC_pub= "data_from_app";
        int qos = 0;
        String clientid = "subClient"+  UUID.randomUUID().toString();;
        String userName = "d1x5yxi/wew";
        String passWord = "GMoBppD1lOhzcxKz";
        Log.d("状态检测","即将开启网络线程");
        try {
            // host为主机名，test为clientid即连接MQTT的客户端ID，一般以客户端唯一标识符表示，MemoryPersistence设置clientid的保存形式，默认为以内存保存
            final MqttClient client = new MqttClient(HOST, clientid, new MemoryPersistence());
            // MQTT的连接设置
            MqttConnectOptions options = new MqttConnectOptions();
            // 设置是否清空session,这里如果设置为false表示服务器会保留客户端的连接记录，这里设置为true表示每次连接到服务器都以新的身份连接
            options.setCleanSession(true);
            // 设置连接的用户名
            options.setUserName(userName);
            // 设置连接的密码
            options.setPassword(passWord.toCharArray());
            // 设置超时时间 单位为秒
            options.setConnectionTimeout(10);
            // 设置会话心跳时间 单位为秒 服务器会每隔1.5*20秒的时间向客户端发送个消息判断客户端是否在线，但这个方法并没有重连的机制
            options.setKeepAliveInterval(20);
            // 设置回调函数
            client.setCallback(new MqttCallback() {

                public void connectionLost(Throwable cause) {
                    System.out.println("connectionLost");
                }
                @Override
                public void messageArrived(String topic, MqttMessage message) throws Exception {
                    System.out.println("topic:"+topic);
                    System.out.println("Qos:"+message.getQos());
                    System.out.println("message content:"+new String(message.getPayload()));
                    Log.d("收到消息：",new String(message.getPayload()));
                    Message msg=new Message();
                    msg.what=1;//回传数据标志位 1
                    Bundle bundle=new Bundle();
                    bundle.putString("msg",new String(message.getPayload()));
                    msg.setData(bundle);
//                    handler2.sendMessage(msg);
                }
                public void deliveryComplete(IMqttDeliveryToken token) {
                    System.out.println("deliveryComplete---------"+ token.isComplete());
                }
            });
            Log.d("当前状态：","准备连接");
            client.connect(options);
            //订阅消息
            client.subscribe(TOPIC_sub, qos);
//            Looper.prepare();
//            handler = new Handler() {
//
//                @Override
//                public void handleMessage(Message msg) {
//                    // TODO Auto-generated method stub
//                    super.handleMessage(msg);
////                System.out.println("The msg" + msg.getData().toString());
//                    if(msg.what==2)//数据发送标志位 2
//                    {
//                        MqttMessage msgg = new MqttMessage(msg.getData().getString("data").getBytes());
//                        try {
//                            client.publish(TOPIC_pub, msgg);
//                        } catch (MqttException e) {
//                            e.printStackTrace();
//                        }
//                    }
//                }
//            };
//            Looper.loop();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
